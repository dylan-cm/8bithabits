rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Global functions that validate resource data
    // Admin check function
    function userIsAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
  	// Allow super users to do everything
    match /{everythingInDatabase=**} {
      allow read, write: if userIsAdmin()
    }
    // Make sure the uid of the requesting user matches name of the user
    // document. The wildcard expression {userId} makes the userId variable
    // available in rules.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    match /habits/{habitID} {
    	// Check the role of the user making the request
      function userIsHabitOwner() {
        return get(/databases/$(database)/documents/habits/$(habitID)/private_data/private).data.roles[request.auth.uid] == "owner";
      }
  		function userIsHabitEditor() {
        return get(/databases/$(database)/documents/habits/$(habitID)/private_data/private).data.roles[request.auth.uid] == "editor";
      }
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (userIsHabitOwner() || userIsHabitEditor());
      allow delete: if request.auth != null && userIsHabitOwner();
    }
    match /sequences/{sequenceID} {
    	// Check the role of the user making the request
      function userIsSequenceOwner() {
        return get(/databases/$(database)/documents/sequence/$(sequenceID)/private_data/private).data.roles[request.auth.uid] == "owner";
      }
      function userIsSequenceEditor() {
        return get(/databases/$(database)/documents/sequence/$(sequenceID)/private_data/private).data.roles[request.auth.uid] == "editor";
      }
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (userIsSequenceOwner() || userIsSequenceEditor());
      allow delete: if request.auth != null && userIsSequenceOwner();
    }
  }
}